

.. _sphx_glr_auto_examples_advanced_plot_eigenvalues.py:


===========
Eigenvalues
===========

Create an G{n,m} random graph and compute the eigenvalues.




.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/valkum/git/networkx/examples/advanced/plot_eigenvalues.py", line 16, in <module>
        L = nx.normalized_laplacian_matrix(G)
      File "<decorator-gen-454>", line 2, in normalized_laplacian_matrix
      File "/Users/valkum/.local/share/virtualenvs/networkx-aQ7kLYwf/lib/python3.6/site-packages/networkx/utils/decorators.py", line 73, in _not_implemented_for
        return not_implement_for_func(*args, **kwargs)
      File "/Users/valkum/.local/share/virtualenvs/networkx-aQ7kLYwf/lib/python3.6/site-packages/networkx/linalg/laplacianmatrix.py", line 116, in normalized_laplacian_matrix
        import scipy
    ModuleNotFoundError: No module named 'scipy'





.. code-block:: python

    import matplotlib.pyplot as plt
    import networkx as nx
    import numpy.linalg

    n = 1000  # 1000 nodes
    m = 5000  # 5000 edges
    G = nx.gnm_random_graph(n, m)

    L = nx.normalized_laplacian_matrix(G)
    e = numpy.linalg.eigvals(L.A)
    print("Largest eigenvalue:", max(e))
    print("Smallest eigenvalue:", min(e))
    plt.hist(e, bins=100)  # histogram with 100 bins
    plt.xlim(0, 2)  # eigenvalues between 0 and 2
    plt.show()

**Total running time of the script:** ( 0 minutes  0.000 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_eigenvalues.py <plot_eigenvalues.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_eigenvalues.ipynb <plot_eigenvalues.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
